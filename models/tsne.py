from openTSNE import TSNE


class MY_TSNE(TSNE):
    def __init__(
        self,
        n_components=2,
        perplexity=30,
        learning_rate="auto",
        early_exaggeration_iter=250,
        early_exaggeration="auto",
        n_iter=500,
        exaggeration=None,
        dof=1,
        theta=0.5,
        n_interpolation_points=3,
        min_num_intervals=50,
        ints_in_interval=1,
        initialization="pca",
        metric="euclidean",
        metric_params=None,
        initial_momentum=0.8,
        final_momentum=0.8,
        max_grad_norm=None,
        max_step_norm=5,
        n_jobs=1,
        neighbors="auto",
        negative_gradient_method="auto",
        callbacks=None,
        callbacks_every_iters=50,
        random_state=None,
        verbose=False,
    ):
        super().__init__(
            n_components,
            perplexity,
            learning_rate,
            early_exaggeration_iter,
            early_exaggeration,
            n_iter,
            exaggeration,
            dof,
            theta,
            n_interpolation_points,
            min_num_intervals,
            ints_in_interval,
            initialization,
            metric,
            metric_params,
            initial_momentum,
            final_momentum,
            max_grad_norm,
            max_step_norm,
            n_jobs,
            neighbors,
            negative_gradient_method,
            callbacks,
            callbacks_every_iters,
            random_state,
            verbose,
        )

    def fit_transform(self, X, y=None):
        # Perform the fit and return the embedding
        return self.fit(X)
